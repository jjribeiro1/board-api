generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid()) @db.Uuid
  name          String             @db.VarChar(200)
  email         String             @unique @db.VarChar(200)
  password      String             @db.VarChar(200)
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt     DateTime?          @map("deleted_at") @db.Timestamptz
  organizations UserOrganization[]
  posts         Post[]
  boards        Board[]
  comments      Comment[]
  session       Session[]
  votes         PostVote[]

  @@map("user")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at") @db.Timestamptz
  userAgent    String?  @map("user_agent")
  device       String?
  ipAddress    String?  @map("ip_address")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model UserOrganization {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @map("user_id") @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  name           String       @db.VarChar(200)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz
  role           Role         @default(MEMBER)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organization")
}

model Organization {
  id                       String             @id @default(uuid()) @db.Uuid
  name                     String             @unique @db.VarChar(140)
  slug                     String             @unique
  logoUrl                  String?            @map("logo_url")
  defaultStatusId          String?            @map("default_status_id") @db.Uuid @unique
  defaultStatus            Status?            @relation("DefaultStatus", fields: [defaultStatusId], references: [id])
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt                DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt                DateTime?          @map("deleted_at") @db.Timestamptz
  boards                   Board[]
  members                  UserOrganization[]
  organizationCustomStatus Status[]
  organizationCustomTags   Tag[]

  @@map("organization")
}

model Board {
  id             String       @id @default(uuid()) @db.Uuid
  title          String       @db.VarChar(200)
  description    String       @db.VarChar(300)
  isPrivate      Boolean      @default(false) @map("is_private")
  isLocked       Boolean      @default(false) @map("is_locked")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id") @db.Uuid
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String       @map("author_id") @db.Uuid
  posts          Post[]

  @@map("board")
}

model Post {
  id          String     @id @default(uuid()) @db.Uuid
  title       String     @db.VarChar(200)
  description String     @db.VarChar(300)
  isPrivate   Boolean    @default(false) @map("is_private")
  isPinned    Boolean    @default(false) @map("is_pinned")
  isLocked    Boolean    @default(false) @map("is_locked")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime?  @map("deleted_at") @db.Timestamptz
  board       Board      @relation(fields: [boardId], references: [id])
  boardId     String     @map("board_id") @db.Uuid
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @map("author_id") @db.Uuid
  status      Status     @relation(fields: [statusId], references: [id])
  statusId    String     @map("status_id") @db.Uuid
  tags        PostTag[]
  comments    Comment[]
  votes       PostVote[]

  @@map("post")
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @map("author_id") @db.Uuid
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @map("post_id") @db.Uuid

  @@map("comment")
}

model PostTag {
  postId String @map("post_id") @db.Uuid
  tagId  String @map("tag_id") @db.Uuid
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@map("post_tag")
}

model Tag {
  id             String       @id @default(uuid()) @db.Uuid
  name           String       @db.VarChar(50)
  color          String       @db.VarChar(50)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz
  posts          PostTag[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id") @db.Uuid

  @@map("tag")
}

model Status {
  id             String       @id @default(uuid()) @db.Uuid
  name           String       @db.VarChar(50)
  color          String       @db.VarChar(50)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz
  posts          Post[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id") @db.Uuid
  defaultOf      Organization? @relation("DefaultStatus")

  @@unique([organizationId, name])
  @@map("status")
}

model PostVote {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@map("post_vote")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  name          String             @db.VarChar(200)
  email         String             @unique @db.VarChar(200)
  password      String             @db.VarChar(200)
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt     DateTime?          @db.Timestamptz
  organizations UserOrganization[]
  posts         Post[]
  boards        Board[]
}

model UserOrganization {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  role           Role         @default(MEMBER)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Organization {
  id                       String             @id @default(uuid())
  name                     String             @db.VarChar(140)
  logoUrl                  String?            @map("logo_url")
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt                DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt                DateTime?          @map("deleted_at") @db.Timestamptz
  boards                   Board[]
  members                  UserOrganization[]
  organizationCustomStatus Status[]
  organizationCustomTags   Tag[]
}

model Board {
  id             String       @id @default(uuid())
  title          String       @db.VarChar(200)
  description    String       @db.VarChar(300)
  isPrivate      Boolean      @default(false) @map("is_private")
  isLocked       Boolean      @default(false) @map("is_locked")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String       @map("author_id")
  posts          Post[]
}

model Post {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(200)
  description String     @db.VarChar(300)
  isPrivate   Boolean    @default(false) @map("is_private")
  isPinned    Boolean    @default(false) @map("is_pinned")
  isLocked    Boolean    @default(false) @map("is_locked")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime?  @map("deleted_at") @db.Timestamptz
  board       Board      @relation(fields: [boardId], references: [id])
  boardId     String     @map("board_id")
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @map("author_id")
  status      Status     @relation(fields: [statusId], references: [id])
  statusId    String     @map("status_id")
  tags        PostTags[]
}

model PostTags {
  postId String @map("post_id")
  tagId  String @map("tag_id")
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Tag {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(50)
  color           String    @db.VarChar(50)
  isSystemDefault Boolean   @default(false) @map("is_system_default")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz
  posts          PostTags[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @map("organization_id")
}

model Status {
  id              String        @id @default(uuid())
  name            String        @db.VarChar(50)
  color           String        @db.VarChar(50)
  isSystemDefault Boolean       @default(false) @map("is_system_default")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz
  posts           Post[]
  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?       @map("organization_id")

  @@unique([organizationId, name])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}
